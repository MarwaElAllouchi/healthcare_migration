name: Test CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      mongo_db:
        image: mongo:7.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: root
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'" 
          --health-interval 5s 
          --health-timeout 5s 
          --health-retries 20

    env:
      PYTHONPATH: ${{ github.workspace }}

    steps:
      # 1Ô∏è‚É£ Checkout
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2Ô∏è‚É£ Setup Python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      # 3Ô∏è‚É£ Install dependencies
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest kaggle pymongo

      # 4Ô∏è‚É£ Setup Kaggle API
      - name: Setup Kaggle API
        run: |
          mkdir -p ~/.kaggle
          echo "{\"username\":\"${{ secrets.KAGGLE_USERNAME }}\",\"key\":\"${{ secrets.KAGGLE_KEY }}\"}" > ~/.kaggle/kaggle.json
          chmod 600 ~/.kaggle/kaggle.json

      # 5Ô∏è‚É£ Download dataset
      - name: Download CSV dataset
        run: |
          mkdir -p data
          kaggle datasets download -d prasad22/healthcare-dataset -p data --unzip

      # 6Ô∏è‚É£ Wait for MongoDB
      - name: Wait for MongoDB
        run: |
          for i in {1..30}; do
            if mongosh --host mongo_db -u root -p root --authenticationDatabase admin --eval "db.adminCommand('ping')" &> /dev/null; then
              echo "MongoDB is ready."
              break
            fi
            echo "Waiting for MongoDB..."
            sleep 2
          done

      # 7Ô∏è‚É£ Initialize MongoDB users
      - name: Initialize MongoDB users
        run: |
          mongosh --host mongo_db -u root -p root --authenticationDatabase admin <<EOF
            use healthcareDB

            db.createUser({
              user: "${{ secrets.MONGO_USER1 }}",
              pwd: "${{ secrets.MONGO_PASSWORD1 }}",
              roles: [{ role: "read", db: "healthcareDB" }]
            });

            db.createUser({
              user: "${{ secrets.MONGO_USER2 }}",
              pwd: "${{ secrets.MONGO_PASSWORD2 }}",
              roles: [{ role: "readWrite", db: "healthcareDB" }]
            });
          EOF

      # 8Ô∏è‚É£ Build Docker image
      - name: Build Docker image
        run: docker build -t my-python-app .

      # 9Ô∏è‚É£ Run migration directly
      - name: Run migration
        run: |
          python ./.init/entrypoint.sh migrate
        env:
          MONGO_HOST: mongo_db
          MONGO_PORT: 27017
          MONGO_DB: healthcareDB
          MONGO_ROOT_USERNAME: root
          MONGO_ROOT_PASSWORD: root
          MONGO_COLLECTION: patients
          CSV_PATH: data/healthcare_dataset.csv
          EXPORT_PATH: data/exported_patients.csv

      # üîü Run tests
      - name: Run Pytest
        env:
          MONGO_HOST: mongo_db
          MONGO_PORT: 27017
          MONGO_ROOT_USERNAME: root
          MONGO_ROOT_PASSWORD: root
          MONGO_DB: healthcareDB_test
          MONGO_COLLECTION: patients_test
          CSV_PATH: tests/data_test/healthcare_dataset_test.csv
        run: |
          pytest -v tests/unit
          pytest -v tests/integration
