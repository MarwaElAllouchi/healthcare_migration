name: CI/CD Healthcare Migration

on:
  push:
    branches:
      - final
  pull_request:
    branches:
      - final

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: ${{ github.workspace }}
      MONGO_DB: ${{ secrets.MONGO_DATABASE }}
      MONGO_ROOT_USERNAME: ${{ secrets.MONGO_ROOT_USERNAME }}
      MONGO_ROOT_PASSWORD: ${{ secrets.MONGO_ROOT_PASSWORD }}
      MONGO_USER1: ${{ secrets.MONGO_USER1 }}
      MONGO_PASSWORD1: ${{ secrets.MONGO_PASSWORD1 }}
      MONGO_USER2: ${{ secrets.MONGO_USER2 }}
      MONGO_PASSWORD2: ${{ secrets.MONGO_PASSWORD2 }}
      MONGO_COLLECTION: patients

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest kaggle pymongo

      - name: Setup Kaggle API
        run: |
          mkdir -p ~/.kaggle
          echo "{\"username\":\"${{ secrets.KAGGLE_USERNAME }}\",\"key\":\"${{ secrets.KAGGLE_KEY }}\"}" > ~/.kaggle/kaggle.json
          chmod 600 ~/.kaggle/kaggle.json

      - name: Download CSV dataset
        run: |
          mkdir -p data
          kaggle datasets download -d prasad22/healthcare-dataset -p data --unzip

      - name: Start MongoDB container
        run: |
          mkdir -p ./mongo-init
          cat <<EOF > ./mongo-init/init-create-users.sh
          use $MONGO_DB;

          db.getSiblingDB("admin").createUser({
              user: "$MONGO_ROOT_USERNAME",
              pwd: "$MONGO_ROOT_PASSWORD",
              roles: [{ role: "root", db: "admin" }]
          });

          db.createUser({
              user: "$MONGO_USER1",
              pwd: "$MONGO_PASSWORD1",
              roles: [{ role: "read", db: "$MONGO_DB" }]
          });

          db.createUser({
              user: "$MONGO_USER2",
              pwd: "$MONGO_PASSWORD2",
              roles: [{ role: "readWrite", db: "$MONGO_DB" }]
          });
          EOF

          docker run -d --name mongo_db \
            -v ${{ github.workspace }}/mongo-init:/docker-entrypoint-initdb.d \
            -e MONGO_INITDB_ROOT_USERNAME=$MONGO_ROOT_USERNAME \
            -e MONGO_INITDB_ROOT_PASSWORD=$MONGO_ROOT_PASSWORD \
            -p 27017:27017 \
            mongo:7.0

      - name: Wait for MongoDB
        run: |
          for i in {1..30}; do
            if mongosh --host localhost -u $MONGO_ROOT_USERNAME -p $MONGO_ROOT_PASSWORD --authenticationDatabase admin --eval "db.adminCommand('ping')" &> /dev/null; then
              echo "MongoDB is ready"
              break
            fi
            echo "Waiting for MongoDB..."
            sleep 2
          done

      - name: Run migration
        run: |
          docker run --rm \
            --link mongo_db:mongo_db \
            -v ${{ github.workspace }}:/app \
            -w /app \
            -e MONGO_HOST=mongo_db \
            -e MONGO_PORT=27017 \
            -e MONGO_DB=$MONGO_DB \
            -e MONGO_ROOT_USERNAME=$MONGO_ROOT_USERNAME \
            -e MONGO_ROOT_PASSWORD=$MONGO_ROOT_PASSWORD \
            -e MONGO_COLLECTION=$MONGO_COLLECTION \
            -e CSV_PATH=/app/data/healthcare_dataset.csv \
            -e EXPORT_PATH=/app/data/exported_patients.csv \
            python:3.13 bash -c "pip install -r requirements.txt && bash ./.init/entrypoint.sh migrate"

      - name: Run Pytest
        env:
          MONGO_HOST: mongo_db
          MONGO_PORT: 27017
          MONGO_ROOT_USERNAME: root
          MONGO_ROOT_PASSWORD: root
          MONGO_DB: healthcareDB_test
          MONGO_COLLECTION: patients_test
          CSV_PATH: tests/data_test/healthcare_dataset_test.csv
        run: |
          pytest -v tests/unit
          pytest -v tests/integration
