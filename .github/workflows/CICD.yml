name: Test CI/CD

on:
  push:
    branches:
      - final
  pull_request:
    branches:
      - final

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      mongo_db:
        image: mongo:7.0
        ports: 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: root

    env:
      PYTHONPATH: ${{ github.workspace }}

    steps:
      # 1️⃣ Checkout
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2️⃣ Setup Python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      # 3️⃣ Install dependencies
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest kaggle pymongo

      # 4️⃣ Setup Kaggle API
      - name: Setup Kaggle API
        run: |
          mkdir -p ~/.kaggle
          echo "{\"username\":\"${{ secrets.KAGGLE_USERNAME }}\",\"key\":\"${{ secrets.KAGGLE_KEY }}\"}" > ~/.kaggle/kaggle.json
          chmod 600 ~/.kaggle/kaggle.json

      # 5️⃣ Download dataset
      - name: Download CSV dataset
        run: |
          mkdir -p data
          kaggle datasets download -d prasad22/healthcare-dataset -p data --unzip

      # 6️⃣ Wait for MongoDB to be ready
      - name: Wait for MongoDB
        run: |
          for i in {1..30}; do
            if mongosh --host mongo_db -u root -p root --authenticationDatabase admin --eval "db.adminCommand('ping')" &> /dev/null; then
              echo "MongoDB is ready."
              break
            fi
            echo "Waiting for MongoDB..."
            sleep 2
          done

      # 7️⃣ Create MongoDB users
      - name: Initialize MongoDB users
        run: |
          mongosh --host mongo_db -u root -p root --authenticationDatabase admin <<EOF
            use healthcareDB
            
            db.createUser({
              user: "readuser",
              pwd: "readpass",
              roles: [{ role: "read", db: "healthcareDB" }]
            })

            db.createUser({
              user: "manageruser",
              pwd: "managerpass",
              roles: [{ role: "readWrite", db: "healthcareDB" }]
            })
          EOF

      # 8️⃣ Run migration
      - name: Run migration
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/app \
            -w /app \
            -e MONGO_HOST=mongo_db \
            -e MONGO_PORT=27017 \
            -e MONGO_DB=healthcareDB \
            -e MONGO_ROOT_USERNAME=root \
            -e MONGO_ROOT_PASSWORD=root \
            -e MONGO_COLLECTION=patients \
            -e CSV_PATH=/app/data/healthcare_dataset.csv \
            -e EXPORT_PATH=/app/data/exported_patients.csv \
            python:3.13 bash -c "pip install -r requirements.txt && bash ./.init/entrypoint.sh migrate"

      # 9️⃣ Run tests
      - name: Run Pytest
        env:
          MONGO_HOST: mongo_db
          MONGO_PORT: 27017
          MONGO_ROOT_USERNAME: root
          MONGO_ROOT_PASSWORD: root
          MONGO_DB: healthcareDB_test
          MONGO_COLLECTION: patients_test
          CSV_PATH: tests/data_test/healthcare_dataset_test.csv
        run: |
          pytest -v tests/unit
          pytest -v tests/integration
