name: Test CI/CD

on:
  push:
    branches:
      - final
  pull_request:
    branches:
      - final

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      mongo_db:
        image: mongo:7.0
  
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: root
    env:
      PYTHONPATH: ${{ github.workspace }}  # Pour que "scripts" soit trouvé
    steps:
      # 1️⃣ Checkout du dépôt
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2️⃣ Setup Python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      # 3️⃣ Installer dépendances Python
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest kaggle

      # 4️⃣ Configurer l'API Kaggle
      - name: Setup Kaggle API
        run: |
          mkdir -p ~/.kaggle
          echo "{\"username\":\"${{ secrets.KAGGLE_USERNAME }}\",\"key\":\"${{ secrets.KAGGLE_KEY }}\"}" > ~/.kaggle/kaggle.json
          chmod 600 ~/.kaggle/kaggle.json

      # 5️⃣ Télécharger le dataset CSV depuis Kaggle
      - name: Download CSV dataset
        run: |
          mkdir -p data
          kaggle datasets download -d prasad22/healthcare-dataset -p data --unzip

        # 6️⃣ Installer mongosh pour interagir avec MongoDB
      - name: Install mongosh
        run: |
          sudo apt-get update
          sudo apt-get install -y gnupg wget
          wget -qO- https://www.mongodb.org/static/pgp/server-7.0.asc | sudo tee /etc/apt/trusted.gpg.d/server-7.0.asc
          echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/7.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list
          sudo apt-get update
          sudo apt-get install -y mongodb-mongosh
          mongosh --version

      # 6️⃣ Attendre que MongoDB soit prêt
      - name: Wait for MongoDB
        run: |
          for i in {1..30}; do
            if mongosh --host mongo_db -u root -p root --authenticationDatabase admin --eval "db.adminCommand('ping')" &> /dev/null; then
              echo "MongoDB is ready."
              break
            fi
            echo "Waiting for MongoDB..."
            sleep 2
          done

      # 7️⃣ Initialiser les utilisateurs MongoDB
      - name: Initialize MongoDB users
        run: |
          mongosh --host mongo_db -u root -p root --authenticationDatabase admin <<EOF
            use healthcareDB
            db.createUser({
              user: "root",
              pwd: "root",
              roles: [{ role: "root", db: "admin" }]
            })
            db.createUser({
              user: "readuser",
              pwd: "readerPass",
              roles: [{ role: "read", db: "healthcareDB" }]
            })
            db.createUser({
              user: "manager",
              pwd: "managerPass",
              roles: [{ role: "readWrite", db: "healthcareDB" }]
            })
          EOF
      # 8️⃣ Lancer le conteneur migration pour exécuter migrate + tests
      - name: Run migration and tests
        env:
          MONGO_HOST: localhost
          MONGO_PORT: 27017
          MONGO_ROOT_USERNAME: root
          MONGO_ROOT_PASSWORD: root
          MONGO_COLLECTION: patients
          MONGO_DB: healthcareDB
          CSV_PATH: data/healthcare_dataset.csv
          EXPORT_PATH: data/exported_patients.csv
        run: |
          bash ./.init/entrypoint.sh migrate

      # 9️⃣ Vérifier les tests unitaires et intégration avec pytest
      - name: Run Pytest
        run: |
        
          pytest -v tests/unit
          pytest -v tests/integration
