name: Test Intégrité Projet

on:
  push:
    branches:
      - workflow_test
  pull_request:
    branches:
      - workflow_test

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      mongo_db:
        image: mongo:7.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: root
        options: >-
          --health-cmd "mongo --username root --password root --eval 'db.adminCommand(\"ping\")'" 
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Download dataset
        run: |
          mkdir -p data
          curl -L -o data/healthcare_dataset.csv "https://www.kaggleusercontent.com/datasets/prasad22/healthcare-dataset/0/healthcare_dataset.csv"

      # ✅ Nouvelle étape : attendre que MongoDB soit prêt
      - name: Wait for MongoDB
        run: |
          for i in {1..30}; do
            if docker exec mongo_db mongo --username root --password root --authenticationDatabase admin --eval "db.adminCommand('ping')" &> /dev/null; then
              echo "MongoDB is ready."
              break
            fi
            echo "Waiting for MongoDB..."
            sleep 2
          done

      - name: Initialize MongoDB users
        run: |
          docker exec mongo_db mongosh -u root -p root --authenticationDatabase admin <<EOF
          use ${{ secrets.MONGO_DATABASE }}

          db.getSiblingDB("admin").createUser({
            user: "${{ secrets.MONGO_ROOT_USERNAME }}",
            pwd: "${{ secrets.MONGO_ROOT_PASSWORD }}",
            roles: [ { role: "root", db: "admin" } ]
          })

          db.createUser({
            user: "${{ secrets.MONGO_USER1 }}",
            pwd: "${{ secrets.MONGO_PASSWORD1 }}",
            roles: [{ role: "read", db: "${{ secrets.MONGO_DATABASE }}" }]
          })

          db.createUser({
            user: "${{ secrets.MONGO_USER2 }}",
            pwd: "${{ secrets.MONGO_PASSWORD2 }}",
            roles: [{ role: "readWrite", db: "${{ secrets.MONGO_DATABASE }}" }]
          })EOF

      - name: Run migration script
        env:
          MONGO_ROOT_USERNAME: ${{ secrets.MONGO_ROOT_USERNAME }}
          MONGO_ROOT_PASSWORD: ${{ secrets.MONGO_ROOT_PASSWORD }}
        run: |
          python scripts/migrate_patients.py

      - name: Run tests
        run: |
          python -m unittest discover -s scripts -p "test_*.py"
