name: Test Intégrité Projet
on:
  push:
    branches:
      - finalCopie
  pull_request:
    branches:
      - finalCopie

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      mongo_db:
        image: mongo:7.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: root

    steps:
      # 1️⃣ Checkout
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2️⃣ Installer Python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # 3️⃣ Installer dépendances Python
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      # 4️⃣ Télécharger le dataset directement
      - name: Download dataset
        run: |
          mkdir -p ../data
          curl -L -o ../data/healthcare_dataset.csv "https://www.kaggleusercontent.com/datasets/prasad22/healthcare-dataset/0/healthcare_dataset.csv"

      # 5️⃣ Installer mongosh pour interagir avec MongoDB
      - name: Install mongosh
        run: |
          sudo apt-get update
          sudo apt-get install -y gnupg wget
          wget -qO- https://www.mongodb.org/static/pgp/server-7.0.asc | sudo tee /etc/apt/trusted.gpg.d/server-7.0.asc
          echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/7.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list
          sudo apt-get update
          sudo apt-get install -y mongodb-mongosh
          mongosh --version

      # 6️⃣ Attendre que MongoDB soit prêt
      - name: Wait for MongoDB
        run: |
          for i in {1..30}; do
            if mongosh --host localhost:27017 -u root -p root --authenticationDatabase admin --eval "db.adminCommand('ping')" &> /dev/null; then
              echo "MongoDB is ready."
              break
            fi
            echo "Waiting for MongoDB..."
            sleep 2
          done

      # 7️⃣ Créer les utilisateurs
      - name: Initialize MongoDB users
        run: |
          mongosh --host localhost:27017 -u root -p root --authenticationDatabase admin <<EOF
            use ${{ secrets.MONGO_DATABASE }}
            
            // Root réel
            db.getSiblingDB("admin").createUser({
              user: "${{ secrets.MONGO_ROOT_USERNAME }}",
              pwd: "${{ secrets.MONGO_ROOT_PASSWORD }}",
              roles: [{ role: "root", db: "admin" }]
            })

            // Utilisateur lecteur
            db.createUser({
              user: "${{ secrets.MONGO_USER1 }}",
              pwd: "${{ secrets.MONGO_PASSWORD1 }}",
              roles: [{ role: "read", db: "${{ secrets.MONGO_DATABASE }}" }]
            })

            // Utilisateur manager
            db.createUser({
              user: "${{ secrets.MONGO_USER2 }}",
              pwd: "${{ secrets.MONGO_PASSWORD2 }}",
              roles: [{ role: "readWrite", db: "${{ secrets.MONGO_DATABASE }}" }]
            })
          EOF

      # 8️⃣ Lancer le script de migration
      - name: Run migration script
        env:
          MONGO_HOST: mongo_db
          MONGO_PORT: 27017
          MONGO_ROOT_USERNAME: ${{ secrets.MONGO_ROOT_USERNAME }}
          MONGO_ROOT_PASSWORD: ${{ secrets.MONGO_ROOT_PASSWORD }}
          MONGO_COLLECTION : ${{ secrets.MONGO_COLLECTION }}
          MONGO_DB: ${{ secrets.MONGO_DATABASE }}

        run: |
          python scripts/migrate_patients.py

      # 9️⃣ Lancer les tests
      - name: Run tests
        run: |
          python -m unittest discover -s scripts -p "test_*.py"
